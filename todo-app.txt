<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TODO アプリ</title>
    <!-- Vuetify CSS -->
    <link href="https://cdn.jsdelivr.net/npm/vuetify@3.4.4/dist/vuetify.min.css" rel="stylesheet">
    <!-- Material Design Icons -->
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@7.3.67/css/materialdesignicons.min.css" rel="stylesheet">
    <!-- SortableJS for drag and drop -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <style>
        .sortable-ghost {
            opacity: 0.4;
        }
        .sortable-chosen {
            background-color: #e3f2fd;
        }
        .todo-item {
            cursor: move;
        }
        .todo-item:hover {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <div id="app">
        <v-app>
            <v-app-bar color="primary" dark>
                <v-app-bar-title>TODO アプリ</v-app-bar-title>
            </v-app-bar>

            <v-main>
                <v-container>
                    <v-row>
                        <!-- TODO登録フォーム -->
                        <v-col cols="12" md="4">
                            <v-card class="pa-4">
                                <v-card-title>TODO登録</v-card-title>
                                <v-form ref="form" v-model="valid">
                                    <v-text-field
                                        v-model="newTodo.title"
                                        label="タスク名"
                                        :rules="titleRules"
                                        required
                                        variant="outlined"
                                        class="mb-3"
                                    ></v-text-field>

                                    <v-select
                                        v-model="newTodo.category"
                                        :items="categories"
                                        label="カテゴリ"
                                        variant="outlined"
                                        class="mb-3"
                                    ></v-select>

                                    <v-text-field
                                        v-model="newTodo.dueDate"
                                        label="期限"
                                        type="date"
                                        variant="outlined"
                                        class="mb-3"
                                    ></v-text-field>

                                    <v-textarea
                                        v-model="newTodo.description"
                                        label="詳細"
                                        variant="outlined"
                                        rows="3"
                                        class="mb-3"
                                    ></v-textarea>

                                    <v-btn
                                        @click="addTodo"
                                        :disabled="!valid"
                                        color="primary"
                                        block
                                        size="large"
                                    >
                                        登録
                                    </v-btn>
                                </v-form>
                            </v-card>
                        </v-col>

                        <!-- TODOリスト一覧 -->
                        <v-col cols="12" md="8">
                            <v-card class="pa-4">
                                <v-card-title>TODOリスト一覧</v-card-title>
                                
                                <!-- フィルタとソートコントロール -->
                                <v-row class="mb-4">
                                    <v-col cols="12" sm="6">
                                        <v-select
                                            v-model="filterCategory"
                                            :items="filterCategories"
                                            label="カテゴリでフィルタ"
                                            variant="outlined"
                                            clearable
                                        ></v-select>
                                    </v-col>
                                    <v-col cols="12" sm="6">
                                        <v-btn-toggle
                                            v-model="sortOrder"
                                            variant="outlined"
                                            divided
                                        >
                                            <v-btn value="asc">
                                                <v-icon>mdi-sort-calendar-ascending</v-icon>
                                                期限昇順
                                            </v-btn>
                                            <v-btn value="desc">
                                                <v-icon>mdi-sort-calendar-descending</v-icon>
                                                期限降順
                                            </v-btn>
                                        </v-btn-toggle>
                                    </v-col>
                                </v-row>

                                <!-- TODOリスト -->
                                <div ref="todoList" class="todo-list">
                                    <v-card
                                        v-for="(todo, index) in filteredAndSortedTodos"
                                        :key="todo.id"
                                        class="mb-3 todo-item"
                                        :data-id="todo.id"
                                        variant="outlined"
                                    >
                                        <v-card-text>
                                            <v-row align="center">
                                                <v-col cols="12" sm="8">
                                                    <h3 class="text-h6 mb-2">{{ todo.title }}</h3>
                                                    <v-chip
                                                        v-if="todo.category"
                                                        color="primary"
                                                        size="small"
                                                        class="mr-2"
                                                    >
                                                        {{ todo.category }}
                                                    </v-chip>
                                                    <v-chip
                                                        v-if="todo.dueDate"
                                                        :color="isOverdue(todo.dueDate) ? 'error' : 'success'"
                                                        size="small"
                                                    >
                                                        {{ formatDate(todo.dueDate) }}
                                                    </v-chip>
                                                    <p v-if="todo.description" class="mt-2 text-body-2">
                                                        {{ todo.description }}
                                                    </p>
                                                </v-col>
                                                <v-col cols="12" sm="4" class="text-right">
                                                    <v-btn
                                                        @click="deleteTodo(todo.id)"
                                                        color="error"
                                                        variant="outlined"
                                                        size="small"
                                                    >
                                                        <v-icon>mdi-delete</v-icon>
                                                        削除
                                                    </v-btn>
                                                </v-col>
                                            </v-row>
                                        </v-card-text>
                                    </v-card>
                                </div>

                                <v-alert
                                    v-if="filteredAndSortedTodos.length === 0"
                                    type="info"
                                    variant="outlined"
                                >
                                    TODOがありません。新しいTODOを登録してください。
                                </v-alert>
                            </v-card>
                        </v-col>
                    </v-row>
                </v-container>
            </v-main>
        </v-app>
    </div>

    <!-- Vue.js -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <!-- Vuetify -->
    <script src="https://cdn.jsdelivr.net/npm/vuetify@3.4.4/dist/vuetify.min.js"></script>

    <script>
        const { createApp } = Vue;
        const { createVuetify } = Vuetify;

        const vuetify = createVuetify({
            theme: {
                defaultTheme: 'light'
            }
        });

        createApp({
            data() {
                return {
                    valid: false,
                    newTodo: {
                        title: '',
                        category: '',
                        dueDate: '',
                        description: ''
                    },
                    todos: [],
                    filterCategory: null,
                    sortOrder: null,
                    categories: [
                        '仕事',
                        '個人',
                        '買い物',
                        '勉強',
                        '健康',
                        'その他'
                    ],
                    titleRules: [
                        v => !!v || 'タスク名は必須です'
                    ]
                }
            },
            computed: {
                filterCategories() {
                    return ['すべて', ...this.categories];
                },
                filteredAndSortedTodos() {
                    let filtered = this.todos;
                    
                    // カテゴリフィルタ
                    if (this.filterCategory && this.filterCategory !== 'すべて') {
                        filtered = filtered.filter(todo => todo.category === this.filterCategory);
                    }
                    
                    // 期限ソート
                    if (this.sortOrder) {
                        filtered = [...filtered].sort((a, b) => {
                            const dateA = new Date(a.dueDate || '9999-12-31');
                            const dateB = new Date(b.dueDate || '9999-12-31');
                            
                            if (this.sortOrder === 'asc') {
                                return dateA - dateB;
                            } else {
                                return dateB - dateA;
                            }
                        });
                    }
                    
                    return filtered;
                }
            },
            methods: {
                addTodo() {
                    if (this.$refs.form.validate()) {
                        const todo = {
                            id: Date.now(),
                            title: this.newTodo.title,
                            category: this.newTodo.category,
                            dueDate: this.newTodo.dueDate,
                            description: this.newTodo.description,
                            createdAt: new Date().toISOString()
                        };
                        
                        this.todos.push(todo);
                        this.saveTodos();
                        this.resetForm();
                    }
                },
                deleteTodo(id) {
                    this.todos = this.todos.filter(todo => todo.id !== id);
                    this.saveTodos();
                },
                resetForm() {
                    this.newTodo = {
                        title: '',
                        category: '',
                        dueDate: '',
                        description: ''
                    };
                    this.$refs.form.resetValidation();
                },
                saveTodos() {
                    localStorage.setItem('todos', JSON.stringify(this.todos));
                },
                loadTodos() {
                    const saved = localStorage.getItem('todos');
                    if (saved) {
                        this.todos = JSON.parse(saved);
                    }
                },
                formatDate(dateString) {
                    if (!dateString) return '';
                    const date = new Date(dateString);
                    return date.toLocaleDateString('ja-JP');
                },
                isOverdue(dateString) {
                    if (!dateString) return false;
                    const today = new Date();
                    const dueDate = new Date(dateString);
                    today.setHours(0, 0, 0, 0);
                    dueDate.setHours(0, 0, 0, 0);
                    return dueDate < today;
                },
                initSortable() {
                    this.$nextTick(() => {
                        if (this.$refs.todoList) {
                            Sortable.create(this.$refs.todoList, {
                                animation: 150,
                                ghostClass: 'sortable-ghost',
                                chosenClass: 'sortable-chosen',
                                onEnd: (evt) => {
                                    const oldIndex = evt.oldIndex;
                                    const newIndex = evt.newIndex;
                                    
                                    if (oldIndex !== newIndex) {
                                        const movedItem = this.filteredAndSortedTodos[oldIndex];
                                        const originalIndex = this.todos.findIndex(todo => todo.id === movedItem.id);
                                        
                                        // 元の配列から削除
                                        this.todos.splice(originalIndex, 1);
                                        
                                        // 新しい位置に挿入
                                        let insertIndex = newIndex;
                                        if (newIndex > 0) {
                                            const beforeItem = this.filteredAndSortedTodos[newIndex - 1];
                                            insertIndex = this.todos.findIndex(todo => todo.id === beforeItem.id) + 1;
                                        } else if (this.filteredAndSortedTodos.length > 1) {
                                            const afterItem = this.filteredAndSortedTodos[1];
                                            insertIndex = this.todos.findIndex(todo => todo.id === afterItem.id);
                                        }
                                        
                                        this.todos.splice(insertIndex, 0, movedItem);
                                        this.saveTodos();
                                    }
                                }
                            });
                        }
                    });
                }
            },
            mounted() {
                this.loadTodos();
                this.initSortable();
            },
            updated() {
                this.initSortable();
            }
        }).use(vuetify).mount('#app');
    </script>
</body>
</html>
